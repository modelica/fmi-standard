m = M_fmi3Instantiate("m", ...)  // "m" is the instance name
                                 // "M_" is the MODEL_IDENTIFIER
nx = ...         // number of states, from XML file
nz = ...         // number of event indicators, from XML file
Tstart = 0       // could also be retrieved from XML file
Tend = 10        // could also be retrieved from XML file
dt = 0.01        // fixed step size of 10 milli-seconds

// set the start time
Tnext = Tend
time  = Tstart
M_fmi3SetTime(m, time)

// set all variable start values (of "ScalarVariable / <type> / start") and
// set the input values at time = Tstart
M_fmi3SetReal/Integer/Boolean/String(m, ...)

// initialize
   // determine continuous and discrete states
   M_fmi3SetupExperiment(m,fmi3False,0.0, Tstart, fmi3True,Tend)
   M_fmi3EnterInitializationMode(m)
   M_fmi3ExitInitializationMode(m)

   // event iteration
   eventInfo.newDiscreteStatesNeeded = true;
   while eventInfo.newDiscreteStatesNeeded loop
     // update discrete states
     M_fmi3NewDiscreteStates(m, &eventInfo)
     if eventInfo.terminateSimulation then goto TERMINATE_MODEL
   end while

// enter Continuous-Time Mode
M_fmi3EnterContinuousTimeMode(m)

// retrieve initial state x and
// nominal values of x (if absolute tolerance is needed)
M_fmi3GetContinuousStates(m, x, nx)
M_fmi3GetNominalsOfContinuousStates(m, x_nominal, nx)

// retrieve solution at t=Tstart, for example, for outputs
M_fmi3GetReal/Integer/Boolean/String(m, ...)

while time < Tend loop
  // compute derivatives
  M_fmi3GetDerivatives(m, der_x, nx)

  // advance time
  h = min(dt, Tnext-time)
  time = time + h
  M_fmi3SetTime(m, time)

  // set inputs at t = time
  M_fmi3SetReal/Integer/Boolean/String(m, ...)

  // set states at t = time and perform one step
  x = x + h*der_x  // forward Euler method
  M_fmi3SetContinuousStates(m, x, nx)

  // get event indicators at t = time
  M_fmi3GetEventIndicators(m, z, nz)

  // detect  events, if any
  time_event = abs(time - Tnext) <= eps
  state_event = ...          // compare sign of z with previous z

  // inform the model about an accepted step
  M_fmi3CompletedIntegratorStep(m, fmi3True, &enterEventMode, &terminateSimulation)
  if terminateSimulation then goto TERMINATE_MODEL

  // handle events
  if entertEventMode or time_event or state_event then
    M_fmi3EnterEventMode(m)

    // event iteration
    eventInfo.newDiscreteStatesNeeded = true;
    while eventInfo.newDiscreteStatesNeeded loop
      // update discrete states
      M_fmi3NewDiscreteStates(m, &eventInfo)
      if eventInfo.terminateSimulation then goto TERMINATE_MODEL
    end while

    // enter Continuous-Time Mode
    M_fmi3EnterContinuousTimeMode(m)

    // retrieve solution at simulation restart
    M_fmi3GetReal/Integer/Boolean/String(m, ...)
    if eventInfo.valuesOfContinuousStatesChanged == fmi3True then
      //the model signals a value change of states, retrieve them
      M_fmi3GetContinuousStates(m, x, nx)
    end if

    if eventInfo.nominalsOfContinuousStatesChanged = fmi3True then
      //the meaning of states has changed; retrieve new nominal values
      M_fmi3GetNominalsOfContinuousStates(m, x_nominal, nx)
    end if

    if eventInfo.nextEventTimeDefined then
      Tnext = min(eventInfo.nextEventTime, Tend)
    else
      Tnext = Tend
    end if
  end if
end while

// terminate simulation and retrieve final values
TERMINATE_MODEL:
M_fmi3Terminate(m)
M_fmi3GetReal/Integer/Boolean/String(m, ...)

// cleanup
M_fmi3FreeInstance(m)

