//////////////////////////
// Define callback

// Global variables
fmi3IntermediateUpdateInfo s1_intermediateInfo;

// Callback

//Remark:
//pointer for intermediateInfo has to be unique for each model partition that calls s1_triggeredClock_intermediateUpdate
//currently no clockIndex information is transported with intermediateInfo.
//Thus it is required to a) that the FMU secures (via lockPreemption, unlockPreemption) the call of fmi3GetClock()
//b) fmi3GetClock() sets back the activation state of the triggered clock
fmi3Status s1_triggeredClock_intermediateUpdate(fmi3InstanceEnvironment instance, fmi3IntermediateUpdateInfo* intermediateUpdateInfo)
{
	//local variables;
	fmi2Boolean triggered_clockStatesS1[];
	fmi2Integer triggered_clockReferenceS1[];
	size_t nclocks;

	// Save intermediateInfo for later use
	 s1_intermediateInfo = *intermediateUpdateInfo;
	 if (s1_intermediateInfo.clocksTicked)
	 {
		s1_fmi3GetClocks(s1, triggered_clockReferenceS1, nclocks, triggered_clockStatesS1);
		s1_fmi3GetReal/Integer/Boolean/String(s1, variables_associated_to_active_triggered_clock);
	 }

	 //evaluate which triggered clocks have ticked and are associated via clockReference to inferred clocks
	 inferredClockReferences = getActiveClocksForFMU(ID1,triggered_clockReferenceS1,triggered_clockStatesS1);
	 for (index=0,count(inferredClockReferences),index++)
	 {
		//call os function to schedule a fmi3ActivateModelPartiton() call together with associated get/set calls
		//In this case clock 2 (defined in modelDescription.XML via valueReference)
		//(--> see functions s1_Execute_clockIndex2 and s2_Execute_clockIndex2)
		scheduleTaskForInferredClock(inferredClockReferences[index]);
	 }

 	 if (s1_intermediateInfo.clocksTicked)
	 {
		s1_fmi3SetReal/Integer/Boolean/String(s1, variables_associated_to_active_triggered_clock);
	 }
	 
}


// Set callback functions,
fmi3CallbackFunctions cbf1;
fmi3EventInfo eventInfo;

//////////////////////////
// Initialization sub-phase
fmi3Status GlobalInitialize()
{

	cbf1.logger = loggerFunction; // Logger function
	cbf1.allocateMemory = calloc;
	cbf1.freeMemory = free;
	cbf1.intermediateUpdate = s1_triggeredClock_intermediateUpdate;
	cbf1.lockPreemption = lockPreemption(); // Preemption is OS specific
	cbf1.unlockPreemption = unlockPreemption(); // Preemption is OS specific

	// Create pointer to information for identifying the FMU in callbacks
	// (note: this is pseudo code, no correct pointer handling)
	cbf1.instanceEnvironment = NULL

	//set Co-Simulation mode
	fmi3CoSimulationConfiguration coSimulationConfiguration;
	coSimulationConfiguration.intermediateVariableGetRequired = false;
	coSimulationConfiguration.intermediateInternalVariableGetRequired = false;
	coSimulationConfiguration.intermediateVariableSetRequired = false;
	coSimulationConfiguration.coSimulationMode = fmi3ModeScheduledExecutionSimulation;

	// Instantiate slave 1
	fmi3Instance s1 = s1_fmi3Instantiate("Tool1" , fmi3CoSimulation, ID1, "", &cbf1, fmi3False, fmi3True, &coSimulationConfiguration);


	if (s1 == NULL) then return FAILURE;


	// Set all variable start values (of "ScalarVariable / <type> / start")
	s1_fmi3SetReal/Integer/Boolean/String(s1, ...);

	// Initialize slaves
	s1_fmi3SetupExperiment(s1, fmi3False, 0.0, startTime, fmi3True, stopTime);

	s1_fmi3EnterInitializationMode(s1);


	// Set the input values at time = startTime
	s1_fmi3SetReal/Integer/Boolean/String(s1, ...);

	s1_fmi3ExitInitializationMode(s1);


	// Get all outputs (for better readability only Real variables are used here. Handling for Integer, Boolean, String is the same)
	s1_fmi3GetReal(s1, yr1_c0); // variable associated to clockIndex 0
	s1_fmi3GetReal(s1, yr1_c1); // variable associated to clockIndex 1
	s1_fmi3GetReal(s1, yr1_c2); // variable associated to clockIndex 2
}

//////////////////////////
// Simulation sub-phase

// Step function for 1ms task. Assuming that both FMUs contain a clock for 1ms (clockIndex=0)
fmi3Status Execute_1ms()
{
	 ur1_c0 = yr1_c0;

	 // Set inputs associated to clockIndex 0
	 s1_fmi3SetReal(s1, ur1_c0);


	 // call step functions for clockIndex 0
	 status1 = fmi3ModelPartitionActivation(s1, 0, activationTime, currentTime);

  	 // Get outputs associated to clockIndex 0
	 s1_fmi3GetReal(s1, yr1_c0);
};

// Step function for 2ms task. Assuming that both FMUs contain a clock for 2ms (clockIndex=1)
fmi3Status Execute_2ms()
{
	 ur1_c1 = yr1_c1;

	 // Set inputs associated to clockIndex 1
	 s1_fmi3SetReal(s1, ur1_c1);


	 // call step functions for clockIndex 1
	 status1 = s1_fmi3ModelPartitionActivation(s1, 1, activationTime, currentTime);

  	 // Get outputs associated to clockIndex 1
	 s1_fmi3GetReal(s1, yr1_c1);
}

// Step function for s1 for inferred clock with clockIndex=2.
fmi3Status s1_Execute_clockIndex2(activationTime, currentTime)
{
	 ur1_c2 = yr1_c2;

	 // Set inputs associated to clockIndex 2
	 s1_fmi3SetReal(s1, ur1_c2);

	 // call step functions for clockIndex 2
	 status = s1_fmi3ModelPartitionActivation(s1, 2, activationTime, currentTime);

  	 // Get outputs associated to clockIndex 2
	s1_fmi3GetReal(s1, yr1_c2);
}

//////////////////////////
// Shutdown sub-phase
fmi3Status GlobalTerminate(status)
{
	if ((status1 != fmi2Error) and (status1 != fmi2Fatal)) then fmi3Terminate(s1);

	if (status1 != fmi2Fatal) then fmi3FreeInstance(s1);
}
